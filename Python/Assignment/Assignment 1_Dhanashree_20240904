{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b2c0c82a-e341-46a4-9e76-f5d13bfe4184",
   "metadata": {},
   "source": [
    "#  Assignment - 1 : Variables, Operators and Type Casting\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cd54c84-3cb0-4c6a-9e2e-b8db82bbf037",
   "metadata": {},
   "source": [
    "# Name: Dhanashree More   Date:04/09/2024"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1eb54308-d75c-4ccd-872d-fd293492cae0",
   "metadata": {},
   "source": [
    "# 1 (a). Undestanding variables"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30a5ca84-d675-4541-a11f-e1d6ef916b39",
   "metadata": {},
   "source": [
    "Variables means storage locations where we can store or save different types of data values. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "309cdbfb-b135-48b1-94bf-bedb635d0973",
   "metadata": {},
   "source": [
    "we don't need to declare which type of data value we are assigning to a particular variable because Python is dynamically typed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8f25af7-2524-4dea-975c-0e0f7a3d1ff8",
   "metadata": {},
   "source": [
    "Example - \n",
    "\"my_name\" is the variable \n",
    "and \n",
    "\"Dhanashree_more\" is the value i stored in variable \n",
    "now checking the data type using type()\n",
    "using the print() statement, output the result\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "135f7f2d-bb3c-4c43-a3fe-f238af7f02ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_name = \"Dhanashree_More"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3c41f902-f838-4bbd-a9e7-1b3c31ade969",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "print(type(my_name))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12d7845d-6900-4cc8-b913-d7d546dee018",
   "metadata": {},
   "source": [
    "# 1 (b). Difference Between Variables & Constants in Python\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a09fff9-f85c-49c8-8bb0-1c89cb236ddb",
   "metadata": {},
   "source": [
    "In Python variables and constants are used to store data, but they serve different purposes: \n",
    "\n",
    "Variables can hold a value of different type of data.Variables are mutable (their values can be update,change or replace)\n",
    "\n",
    "Constants are types of variables and which are immutable(can not change)in nature, having a fixed value. constants are typically defined using UPPERCASE letters to differentiate them from variables. We can't edit or replace the constant's value."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ae07b67-3833-4468-94eb-1ab7474e0f1a",
   "metadata": {},
   "source": [
    "# 2 (a) Different types of Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "157dff25-5be7-4e74-b101-061c287cdfee",
   "metadata": {},
   "source": [
    "#1. Integer means numeric value can be whole no, negative or positive \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "57cbf2d4-6fa8-45ed-9177-5edfe434f44d",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "8e9d87e5-4de5-4662-b0fa-fecac8d06515",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "print(type(a))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02022d58-837f-4379-ae03-45bcc761017c",
   "metadata": {},
   "source": [
    "#2. Float means numbers with decimal point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "6bbfcdea-5685-45a9-82c0-d8b1b8466b3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 12.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "c3f7a108-0f5f-44ff-8acc-a301b33974b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "print(type(a))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9711366e-7579-4d3d-9180-6a32a7202679",
   "metadata": {},
   "source": [
    "#3. String means value in text format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "6f76edbc-e40b-4959-a8c8-7960a9c73a7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = \"Ram\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "1c730b67-a2c9-43b6-b86e-f780973d5cac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "print(type(a))"
   ]
  },
  {
   "cell_type": "raw",
   "id": "72520990-af59-48ee-ba58-f6426f4bed92",
   "metadata": {},
   "source": [
    "# 4. Boolean (data type that can have one of two values: True or False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "b59a4ee1-2b79-4673-98f2-3f897d491e8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'bool'>\n",
      "<class 'bool'>\n"
     ]
    }
   ],
   "source": [
    "x = True\n",
    "y = False\n",
    "\n",
    "print(type(x))\n",
    "print(type(y))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43ef7951-0144-4e3d-897f-c74221967dc2",
   "metadata": {},
   "source": [
    "# 3(a) Arithmetic Operator\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "571f1b5e-387d-4333-b880-ef489878bf54",
   "metadata": {},
   "source": [
    "used to do basic mathematical operations on numerical quantities\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "a37d4044-26a9-42c3-a1f7-4d1a16737e43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Value for Addition: 25\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "# Addition(+) : add two numbers together.\n",
    "a = 15\n",
    "b = 10\n",
    "Addition = (a + b)\n",
    "print(\"Value for Addition:\", a+b)\n",
    "print(type(Addition))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "ac109308-33f8-4d89-8bd8-8c72d1a14ee5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "value for Substraction: 5\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "# Substraction(-) : minus one number from another no \n",
    "x = 15\n",
    "y = 10\n",
    "Substraction = (x - y)\n",
    "print(\"value for Substraction:\", x - y)\n",
    "print(type(Substraction))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "dc1b9270-5e15-49af-8fc5-c393b5d12920",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "value for multiplication: 16\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "# Multiplication (*) : multiply two number \n",
    "p = 4\n",
    "q = 4\n",
    "Multiplication = (p * q)\n",
    "print(\"value for multiplication:\", p * q)\n",
    "print(type(Multiplication))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "91c6d183-0a37-4197-85e2-276ea25d0be2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Division: 5.0\n",
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "#Division (/) : divide one number by another \n",
    "a = 25\n",
    "b = 5\n",
    "Division = (a / b)\n",
    "print(\"Division:\", a / b)\n",
    "print(type(Division))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "10cd7f38-9de8-479a-b164-3c691ca0c54b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f_div: 2\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "#floor division (//) : divide two numbers and round down to the nearest whole number\n",
    "c = 8\n",
    "d = 3\n",
    "f_div = (c // d)\n",
    "print(\"value for f_div:\", c // d)\n",
    "print(type(f_div))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c6d634fb-8f79-4314-8a55-d9be882dc3be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "value for modulus: 0\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "#Modulus (%) : used to divide one number by another and return the remainder\n",
    "a = 10\n",
    "b = 5\n",
    "Modulus = (a % b)\n",
    "print(\"value for modulus:\", a % b)\n",
    "print(type(Modulus))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e12afe2e-2338-44dd-9585-9d170c1fe854",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "value for Expo: 3375\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "#Exponentiation (**): Raises one number to the power of another\n",
    "h = 15\n",
    "i = 3\n",
    "Expo = (h ** i)\n",
    "print(\"value for Expo:\", h ** i)    \n",
    "print(type(Expo))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e037b458-a955-4b95-bc28-7097d7f73d97",
   "metadata": {},
   "source": [
    "# 3(b) Write a Python script to calculate the area of a rectangle using variables length and width with values 5 and 10, respectively. Use the multiplication operator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c4eef1d6-86ce-4c16-bc62-41586c1f10b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Area of the retangular: 50\n"
     ]
    }
   ],
   "source": [
    "Length = 5                   #assigning variables for calculating length and width        \n",
    "Width = 10 \n",
    "Area = (Length * Width)      #calculating area using multiplication operator \n",
    "print(\"Area of the retangular:\", Area)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28574a26-1fe6-486e-9a62-97a131b5b812",
   "metadata": {},
   "source": [
    "# 4 (a) Comparison and Logical Operators. Explain the following comparison operators with examples\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d8a0ed8-6b21-460c-a073-812efdcebc5d",
   "metadata": {},
   "source": [
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ec1fbe31-cf2b-44a9-822d-4070dfd81ca2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "#1 Equal to (==) : used to check for equality.If both of the operands are equal, then will return True, otherwise will return False\n",
    "m = 5\n",
    "n = 6\n",
    "o = 5\n",
    "print(m==n)\n",
    "print(m==o)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "41afd03f-d0a4-48a5-b00f-c88e125e881f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "# 2 Not equal to (!=): used to check if two values are not equal\n",
    "e = 55\n",
    "f = 99\n",
    "g = 55\n",
    "print(e!=f)\n",
    "print(e!=g)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "231923fd-340a-463b-9efe-9c39c200eb06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# 3 Greater than (>): used to Checks if the left operand is greater than the right operand.\n",
    "c = 34\n",
    "d = 66\n",
    "print(c>d)   \n",
    "print(d>c)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "d5bd12e3-e729-4c75-b6bb-7e32806c653c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# 4 less than (< ): used to Checks if the left operand is lesser than the right operand.\n",
    "p = 6\n",
    "q = 9\n",
    "print(p>q)   \n",
    "print(q>p)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "1b8c642d-c612-4d8e-9e78-97745b1837c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "# 5 Greater than or equal to (>=): Checks if the left operand is greater than or equal to the right operand than it will shows true or false otherwise.\n",
    "a = 80\n",
    "b = 66\n",
    "c = 80\n",
    "print(a >= b)   \n",
    "print(a >= c)   \n",
    "print(b >= c)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d788f7a9-27b7-42d4-8583-d5fba4aef199",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# 6 Less than or equal to (<=): Checks if the left operand is less than or equal to the right operand.\n",
    "x = 9\n",
    "y = 6\n",
    "z = 9\n",
    "print(x <= y)\n",
    "print(x <= z)\n",
    "print(y <= z)      "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8599040b-30f6-4659-b7f4-4f744e8b928f",
   "metadata": {},
   "source": [
    "# 4 (b) Using logical operators (`and`, `or`, `not`), write a Python script that checks if a number is positive and even\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b0e84499-19de-45d1-a505-ebbf96069592",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number :  2563\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Positive and odd\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter the number : \"))\n",
    "if num > 0:\n",
    "          if num%2 == 0:\n",
    "            print(\"Positive and even\")\n",
    "          else:\n",
    "            print(\"Positive and odd\")\n",
    "elif num == 0:\n",
    "    print(\"Number is Zero\")\n",
    "else :\n",
    "    print (\"Negative number\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d65297c8-e654-418d-a825-90a9a3698ebc",
   "metadata": {},
   "source": [
    "# 5 (a) Type Casting in Python"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d58e0b81-812f-43d1-8319-d0f282f0d1ad",
   "metadata": {},
   "source": [
    "Type casting means coverting a one data type to another\n",
    "types of casting in python \n",
    "1 Implicit Type Casting \n",
    "2 Explicit Type Casting\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfcb5465-82f1-4152-b02d-bac3e94bfd1d",
   "metadata": {},
   "source": [
    "1 Implicit Type Casting - Python automatically converts the datatype. python coverts smaller data type to larger data type to avoid data loss. Eg - Integer to float"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "da5cd3c5-f9cb-4d69-9bd9-455e7c4def8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "201.6\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = 100     #smaller data type integer \n",
    "b = 101.6   #larger data type float \n",
    "sum = (a + b )\n",
    "print (sum)\n",
    "type(sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dc7ec71-da59-4290-a00e-a2edf79a9200",
   "metadata": {},
   "source": [
    "2 Explicit Type Casting - manually performed by the programmer using built in formula. allows control over the conversion process.\n",
    "Uses functions like int(), float(), str(), etc. Eg - Converting a float to an integer or an integer to a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "c7fba117-a8fa-4c0d-9ec6-cb5eb90d9ce2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "# int to str\n",
    "num_int = 100 #num int (converting)\n",
    "num_str = str(num)\n",
    "print(type(num_str))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "ce5eb323-1b90-44a7-8ae7-bc2af32200ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "#str to float\n",
    "num_str = \"456\" #num str (coverting)\n",
    "num_float = float(num_str)\n",
    "print(type(num_float))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "230cf158-60e1-4c53-ac96-c396506a9714",
   "metadata": {},
   "source": [
    "# 5(b) Write a Python script that"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b6b38203-1047-45b1-a55b-ddb748020112",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "#Converts a float to an integer\n",
    "a = 23.3\n",
    "b = int(a)\n",
    "print(b)\n",
    "print(type(b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8951bb81-8e7f-479a-a2d6-21a2e810f830",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.0\n",
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "#convert a interger to float\n",
    "c = 12\n",
    "d = float(c)\n",
    "print(d)\n",
    "print(type(d))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b8225277-cf48-4c71-9d5b-6597523da0e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56.0\n",
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "#convert a string to float \n",
    "p = '56'\n",
    "q = float(p)\n",
    "print(q)\n",
    "print(type(q))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a53f4e9b-ebbd-4d87-9a8c-8e7a85ae22d4",
   "metadata": {},
   "source": [
    "# 6.Practical Exercise: Mini Calculator. Write a Python script that asks the user to input two numbers and then"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7e1ddaa-bbc8-4afa-9571-0433cfdeae82",
   "metadata": {},
   "source": [
    "#1 Adds the two numbers and prints the result.\r",
    "#\n",
    " \r\n",
    "Subtracts the second number from the first and prints the result#. 3.\r\n",
    "Multiplies the two numbers and prints the resu#l \r\n",
    "4.\r\n",
    "Divides the first number by the second and prints the result (handle division by z#e ).\r\n",
    "5.\r\n",
    "Converts the sum of the numbers to a string and prints the type of the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ba03d2c8-25c9-4b6a-9f11-f706c0fe1374",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the first number 56\n",
      "Enter the second number 33\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of two numbers: 89\n",
      "Subtraction of two numbers: 23\n",
      "Multiplication of two numbers: 1848\n",
      "Division value: 1.696969696969697\n",
      "Type of sum_result: <class 'str'>\n"
     ]
    }
   ],
   "source": [
    "num1= int(input(\"Enter the first number\"))\n",
    "num2= int(input(\"Enter the second number\"))\n",
    "\n",
    "#Add\n",
    "sum= num1+num2\n",
    "sum_result= sum\n",
    "print(\"Sum of two numbers:\",sum_result)\n",
    "\n",
    "#Sub\n",
    "sub= num1-num2\n",
    "sub_result=sub\n",
    "print(\"Subtraction of two numbers:\",sub_result)\n",
    "\n",
    "#Mul\n",
    "mul= num2*num1\n",
    "mul_result= mul\n",
    "print(\"Multiplication of two numbers:\",mul_result)\n",
    "\n",
    "#Division\n",
    "if num2!=0:\n",
    "    div_result= num1/num2\n",
    "    print(\"Division value:\", div_result)\n",
    "else:\n",
    "    print(\"Zero division error\")\n",
    "\n",
    "\n",
    "#convert the sum to a string and print the type of result\n",
    "final_result= str(sum_result)\n",
    "print(\"Type of sum_result:\", type(final_result))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c48e2437-08c2-45ca-bc74-50b5e01d6342",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
